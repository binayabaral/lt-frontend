name: Web application - Build and deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        type: choice
        options:
          - 'dev'
          - 'prod'

  pull_request:
    types: [synchronize, closed, opened]
    branches:
      - dev
      - main

jobs:
  resolve-env:
    runs-on: ubuntu-latest
    steps:
      - name: resolve environment
        run: |
          branch_ref=${{ github.head_ref || github.event.ref }}
          branch_name=${branch_ref#refs/heads/}

          if [[ "$branch_name" == "main" ]] || ${{ contains(github.event.inputs.environment, 'prod') }}; then
            echo "env_name=prod" >> $GITHUB_ENV

          else
            echo "env_name=dev" >> $GITHUB_ENV
          fi

          echo "env=${{env.env_name}}"
    outputs:
      env_name: '${{ env.env_name }}'

  build:
    name: Build and deploy web application
    runs-on: ubuntu-latest
    needs: [resolve-env]
    environment: ${{ needs.resolve-env.outputs.env_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node 18
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install dependencies
        run: yarn --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Build web application
        run: yarn build
        env:
          REACT_APP_BASE_URL: ${{ vars.REACT_APP_BASE_URL }}

      - name: Create a release
        if: github.event.pull_request.merged && (contains(github.base_ref, 'main') || contains(github.base_ref, 'staging'))
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy web app
        if: github.event.pull_request.merged
        run: |
          echo "Bucket name: $STATIC_FILE_STORAGE_BUCKET_NAME"
          cd ${{ github.workspace }}/build
          aws s3 sync . $STATIC_FILE_STORAGE_BUCKET_NAME --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          STATIC_FILE_STORAGE_BUCKET_NAME: ${{ vars.STATIC_FILE_STORAGE_BUCKET_NAME }}

      - name: Create cloudfront Invalidation
        if: github.event.pull_request.merged
        run: aws cloudfront create-invalidation --distribution-id $WEB_APP_CLOUDFRONT_DISTRIBUTION --paths "/*"
        env:
          WEB_APP_CLOUDFRONT_DISTRIBUTION: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
